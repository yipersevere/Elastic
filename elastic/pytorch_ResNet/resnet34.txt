[Phase 1] : Data Preperation
Files already downloaded and verified
Files already downloaded and verified

[Phase 2] : Model setup

model_ft.parameters()
<generator object Module.parameters at 0x0000022A21B33E08>
model_ft.state_dict().items()
<odict_items, len() = 267>
[0]: ('module.conv1.weight', <Tensor, len() = 64>)
[1]: ('module.bn1.weight', <Tensor, len() = 64>)
[2]: ('module.bn1.bias', <Tensor, len() = 64>)
[3]: ('module.bn1.running_mean', <Tensor, len() = 64>)
[4]: ('module.bn1.running_var', <Tensor, len() = 64>)
[5]: ('module.layer1.0.conv1.weight', <Tensor, len() = 64>)
[6]: ('module.layer1.0.bn1.weight', <Tensor, len() = 64>)
[7]: ('module.layer1.0.bn1.bias', <Tensor, len() = 64>)
[8]: ('module.layer1.0.bn1...ning_mean', <Tensor, len() = 64>)
[9]: ('module.layer1.0.bn1...nning_var', <Tensor, len() = 64>)
[10]: ('module.layer1.0.conv2.weight', <Tensor, len() = 64>)
[11]: ('module.layer1.0.bn2.weight', <Tensor, len() = 64>)
[12]: ('module.layer1.0.bn2.bias', <Tensor, len() = 64>)
[13]: ('module.layer1.0.bn2...ning_mean', <Tensor, len() = 64>)
[14]: ('module.layer1.0.bn2...nning_var', <Tensor, len() = 64>)
[15]: ('module.layer1.0.conv3.weight', <Tensor, len() = 256>)
[16]: ('module.layer1.0.bn3.weight', <Tensor, len() = 256>)
[17]: ('module.layer1.0.bn3.bias', <Tensor, len() = 256>)
[18]: ('module.layer1.0.bn3...ning_mean', <Tensor, len() = 256>)
[19]: ('module.layer1.0.bn3...nning_var', <Tensor, len() = 256>)
[20]: ('module.layer1.0.dow....0.weight', <Tensor, len() = 256>)
[21]: ('module.layer1.0.dow....1.weight', <Tensor, len() = 256>)
[22]: ('module.layer1.0.dow...le.1.bias', <Tensor, len() = 256>)
[23]: ('module.layer1.0.dow...ning_mean', <Tensor, len() = 256>)
[24]: ('module.layer1.0.dow...nning_var', <Tensor, len() = 256>)

======================================================================1

[25]: ('module.layer1.1.conv1.weight', <Tensor, len() = 64>)
[26]: ('module.layer1.1.bn1.weight', <Tensor, len() = 64>)
[27]: ('module.layer1.1.bn1.bias', <Tensor, len() = 64>)
[28]: ('module.layer1.1.bn1...ning_mean', <Tensor, len() = 64>)
[29]: ('module.layer1.1.bn1...nning_var', <Tensor, len() = 64>)
[30]: ('module.layer1.1.conv2.weight', <Tensor, len() = 64>)
[31]: ('module.layer1.1.bn2.weight', <Tensor, len() = 64>)
[32]: ('module.layer1.1.bn2.bias', <Tensor, len() = 64>)
[33]: ('module.layer1.1.bn2...ning_mean', <Tensor, len() = 64>)
[34]: ('module.layer1.1.bn2...nning_var', <Tensor, len() = 64>)
[35]: ('module.layer1.1.conv3.weight', <Tensor, len() = 256>)
[36]: ('module.layer1.1.bn3.weight', <Tensor, len() = 256>)
[37]: ('module.layer1.1.bn3.bias', <Tensor, len() = 256>)
[38]: ('module.layer1.1.bn3...ning_mean', <Tensor, len() = 256>)
[39]: ('module.layer1.1.bn3...nning_var', <Tensor, len() = 256>)

=====================================================================2

[40]: ('module.layer1.2.conv1.weight', <Tensor, len() = 64>)
[41]: ('module.layer1.2.bn1.weight', <Tensor, len() = 64>)
[42]: ('module.layer1.2.bn1.bias', <Tensor, len() = 64>)
[43]: ('module.layer1.2.bn1...ning_mean', <Tensor, len() = 64>)
[44]: ('module.layer1.2.bn1...nning_var', <Tensor, len() = 64>)
[45]: ('module.layer1.2.conv2.weight', <Tensor, len() = 64>)
[46]: ('module.layer1.2.bn2.weight', <Tensor, len() = 64>)
[47]: ('module.layer1.2.bn2.bias', <Tensor, len() = 64>)
[48]: ('module.layer1.2.bn2...ning_mean', <Tensor, len() = 64>)
[49]: ('module.layer1.2.bn2...nning_var', <Tensor, len() = 64>)
[50]: ('module.layer1.2.conv3.weight', <Tensor, len() = 256>)
[51]: ('module.layer1.2.bn3.weight', <Tensor, len() = 256>)
[52]: ('module.layer1.2.bn3.bias', <Tensor, len() = 256>)
[53]: ('module.layer1.2.bn3...ning_mean', <Tensor, len() = 256>)
[54]: ('module.layer1.2.bn3...nning_var', <Tensor, len() = 256>)

====================================================================3

[55]: ('module.layer2.0.conv1.weight', <Tensor, len() = 128>)
[56]: ('module.layer2.0.bn1.weight', <Tensor, len() = 128>)
[57]: ('module.layer2.0.bn1.bias', <Tensor, len() = 128>)
[58]: ('module.layer2.0.bn1...ning_mean', <Tensor, len() = 128>)
[59]: ('module.layer2.0.bn1...nning_var', <Tensor, len() = 128>)
[60]: ('module.layer2.0.conv2.weight', <Tensor, len() = 128>)
[61]: ('module.layer2.0.bn2.weight', <Tensor, len() = 128>)
[62]: ('module.layer2.0.bn2.bias', <Tensor, len() = 128>)
[63]: ('module.layer2.0.bn2...ning_mean', <Tensor, len() = 128>)
[64]: ('module.layer2.0.bn2...nning_var', <Tensor, len() = 128>)
[65]: ('module.layer2.0.conv3.weight', <Tensor, len() = 512>)
[66]: ('module.layer2.0.bn3.weight', <Tensor, len() = 512>)
[67]: ('module.layer2.0.bn3.bias', <Tensor, len() = 512>)
[68]: ('module.layer2.0.bn3...ning_mean', <Tensor, len() = 512>)
[69]: ('module.layer2.0.bn3...nning_var', <Tensor, len() = 512>)
[70]: ('module.layer2.0.dow....0.weight', <Tensor, len() = 512>)
[71]: ('module.layer2.0.dow....1.weight', <Tensor, len() = 512>)
[72]: ('module.layer2.0.dow...le.1.bias', <Tensor, len() = 512>)
[73]: ('module.layer2.0.dow...ning_mean', <Tensor, len() = 512>)
[74]: ('module.layer2.0.dow...nning_var', <Tensor, len() = 512>)

===================================================================4

[75]: ('module.layer2.1.conv1.weight', <Tensor, len() = 128>)
[76]: ('module.layer2.1.bn1.weight', <Tensor, len() = 128>)
[77]: ('module.layer2.1.bn1.bias', <Tensor, len() = 128>)
[78]: ('module.layer2.1.bn1...ning_mean', <Tensor, len() = 128>)
[79]: ('module.layer2.1.bn1...nning_var', <Tensor, len() = 128>)
[80]: ('module.layer2.1.conv2.weight', <Tensor, len() = 128>)
[81]: ('module.layer2.1.bn2.weight', <Tensor, len() = 128>)
[82]: ('module.layer2.1.bn2.bias', <Tensor, len() = 128>)
[83]: ('module.layer2.1.bn2...ning_mean', <Tensor, len() = 128>)
[84]: ('module.layer2.1.bn2...nning_var', <Tensor, len() = 128>)
[85]: ('module.layer2.1.conv3.weight', <Tensor, len() = 512>)
[86]: ('module.layer2.1.bn3.weight', <Tensor, len() = 512>)
[87]: ('module.layer2.1.bn3.bias', <Tensor, len() = 512>)
[88]: ('module.layer2.1.bn3...ning_mean', <Tensor, len() = 512>)
[89]: ('module.layer2.1.bn3...nning_var', <Tensor, len() = 512>)

==================================================================5

[90]: ('module.layer2.2.conv1.weight', <Tensor, len() = 128>)
[91]: ('module.layer2.2.bn1.weight', <Tensor, len() = 128>)
[92]: ('module.layer2.2.bn1.bias', <Tensor, len() = 128>)
[93]: ('module.layer2.2.bn1...ning_mean', <Tensor, len() = 128>)
[94]: ('module.layer2.2.bn1...nning_var', <Tensor, len() = 128>)
[95]: ('module.layer2.2.conv2.weight', <Tensor, len() = 128>)
[96]: ('module.layer2.2.bn2.weight', <Tensor, len() = 128>)
[97]: ('module.layer2.2.bn2.bias', <Tensor, len() = 128>)
[98]: ('module.layer2.2.bn2...ning_mean', <Tensor, len() = 128>)
[99]: ('module.layer2.2.bn2...nning_var', <Tensor, len() = 128>)
[100]: ('module.layer2.2.conv3.weight', <Tensor, len() = 512>)
[101]: ('module.layer2.2.bn3.weight', <Tensor, len() = 512>)
[102]: ('module.layer2.2.bn3.bias', <Tensor, len() = 512>)
[103]: ('module.layer2.2.bn3...ning_mean', <Tensor, len() = 512>)
[104]: ('module.layer2.2.bn3...nning_var', <Tensor, len() = 512>)

==================================================================6

[105]: ('module.layer2.3.conv1.weight', <Tensor, len() = 128>)
[106]: ('module.layer2.3.bn1.weight', <Tensor, len() = 128>)
[107]: ('module.layer2.3.bn1.bias', <Tensor, len() = 128>)
[108]: ('module.layer2.3.bn1...ning_mean', <Tensor, len() = 128>)
[109]: ('module.layer2.3.bn1...nning_var', <Tensor, len() = 128>)
[110]: ('module.layer2.3.conv2.weight', <Tensor, len() = 128>)
[111]: ('module.layer2.3.bn2.weight', <Tensor, len() = 128>)
[112]: ('module.layer2.3.bn2.bias', <Tensor, len() = 128>)
[113]: ('module.layer2.3.bn2...ning_mean', <Tensor, len() = 128>)
[114]: ('module.layer2.3.bn2...nning_var', <Tensor, len() = 128>)
[115]: ('module.layer2.3.conv3.weight', <Tensor, len() = 512>)
[116]: ('module.layer2.3.bn3.weight', <Tensor, len() = 512>)
[117]: ('module.layer2.3.bn3.bias', <Tensor, len() = 512>)
[118]: ('module.layer2.3.bn3...ning_mean', <Tensor, len() = 512>)
[119]: ('module.layer2.3.bn3...nning_var', <Tensor, len() = 512>)

=======================================================================7

[120]: ('module.layer3.0.conv1.weight', <Tensor, len() = 256>)
[121]: ('module.layer3.0.bn1.weight', <Tensor, len() = 256>)
[122]: ('module.layer3.0.bn1.bias', <Tensor, len() = 256>)
[123]: ('module.layer3.0.bn1...ning_mean', <Tensor, len() = 256>)
[124]: ('module.layer3.0.bn1...nning_var', <Tensor, len() = 256>)
[125]: ('module.layer3.0.conv2.weight', <Tensor, len() = 256>)
[126]: ('module.layer3.0.bn2.weight', <Tensor, len() = 256>)
[127]: ('module.layer3.0.bn2.bias', <Tensor, len() = 256>)
[128]: ('module.layer3.0.bn2...ning_mean', <Tensor, len() = 256>)
[129]: ('module.layer3.0.bn2...nning_var', <Tensor, len() = 256>)
[130]: ('module.layer3.0.conv3.weight', <Tensor, len() = 1024>)
[131]: ('module.layer3.0.bn3.weight', <Tensor, len() = 1024>)
[132]: ('module.layer3.0.bn3.bias', <Tensor, len() = 1024>)
[133]: ('module.layer3.0.bn3...ning_mean', <Tensor, len() = 1024>)
[134]: ('module.layer3.0.bn3...nning_var', <Tensor, len() = 1024>)
[135]: ('module.layer3.0.dow....0.weight', <Tensor, len() = 1024>)
[136]: ('module.layer3.0.dow....1.weight', <Tensor, len() = 1024>)
[137]: ('module.layer3.0.dow...le.1.bias', <Tensor, len() = 1024>)
[138]: ('module.layer3.0.dow...ning_mean', <Tensor, len() = 1024>)
[139]: ('module.layer3.0.dow...nning_var', <Tensor, len() = 1024>)

=======================================================================8

[140]: ('module.layer3.1.conv1.weight', <Tensor, len() = 256>)
[141]: ('module.layer3.1.bn1.weight', <Tensor, len() = 256>)
[142]: ('module.layer3.1.bn1.bias', <Tensor, len() = 256>)
[143]: ('module.layer3.1.bn1...ning_mean', <Tensor, len() = 256>)
[144]: ('module.layer3.1.bn1...nning_var', <Tensor, len() = 256>)
[145]: ('module.layer3.1.conv2.weight', <Tensor, len() = 256>)
[146]: ('module.layer3.1.bn2.weight', <Tensor, len() = 256>)
[147]: ('module.layer3.1.bn2.bias', <Tensor, len() = 256>)
[148]: ('module.layer3.1.bn2...ning_mean', <Tensor, len() = 256>)
[149]: ('module.layer3.1.bn2...nning_var', <Tensor, len() = 256>)
[150]: ('module.layer3.1.conv3.weight', <Tensor, len() = 1024>)
[151]: ('module.layer3.1.bn3.weight', <Tensor, len() = 1024>)
[152]: ('module.layer3.1.bn3.bias', <Tensor, len() = 1024>)
[153]: ('module.layer3.1.bn3...ning_mean', <Tensor, len() = 1024>)
[154]: ('module.layer3.1.bn3...nning_var', <Tensor, len() = 1024>)

========================================================================9

[155]: ('module.layer3.2.conv1.weight', <Tensor, len() = 256>)
[156]: ('module.layer3.2.bn1.weight', <Tensor, len() = 256>)
[157]: ('module.layer3.2.bn1.bias', <Tensor, len() = 256>)
[158]: ('module.layer3.2.bn1...ning_mean', <Tensor, len() = 256>)
[159]: ('module.layer3.2.bn1...nning_var', <Tensor, len() = 256>)
[160]: ('module.layer3.2.conv2.weight', <Tensor, len() = 256>)
[161]: ('module.layer3.2.bn2.weight', <Tensor, len() = 256>)
[162]: ('module.layer3.2.bn2.bias', <Tensor, len() = 256>)
[163]: ('module.layer3.2.bn2...ning_mean', <Tensor, len() = 256>)
[164]: ('module.layer3.2.bn2...nning_var', <Tensor, len() = 256>)
[165]: ('module.layer3.2.conv3.weight', <Tensor, len() = 1024>)
[166]: ('module.layer3.2.bn3.weight', <Tensor, len() = 1024>)
[167]: ('module.layer3.2.bn3.bias', <Tensor, len() = 1024>)
[168]: ('module.layer3.2.bn3...ning_mean', <Tensor, len() = 1024>)
[169]: ('module.layer3.2.bn3...nning_var', <Tensor, len() = 1024>)

=======================================================================10

[170]: ('module.layer3.3.conv1.weight', <Tensor, len() = 256>)
[171]: ('module.layer3.3.bn1.weight', <Tensor, len() = 256>)
[172]: ('module.layer3.3.bn1.bias', <Tensor, len() = 256>)
[173]: ('module.layer3.3.bn1...ning_mean', <Tensor, len() = 256>)
[174]: ('module.layer3.3.bn1...nning_var', <Tensor, len() = 256>)
[175]: ('module.layer3.3.conv2.weight', <Tensor, len() = 256>)
[176]: ('module.layer3.3.bn2.weight', <Tensor, len() = 256>)
[177]: ('module.layer3.3.bn2.bias', <Tensor, len() = 256>)
[178]: ('module.layer3.3.bn2...ning_mean', <Tensor, len() = 256>)
[179]: ('module.layer3.3.bn2...nning_var', <Tensor, len() = 256>)
[180]: ('module.layer3.3.conv3.weight', <Tensor, len() = 1024>)
[181]: ('module.layer3.3.bn3.weight', <Tensor, len() = 1024>)
[182]: ('module.layer3.3.bn3.bias', <Tensor, len() = 1024>)
[183]: ('module.layer3.3.bn3...ning_mean', <Tensor, len() = 1024>)
[184]: ('module.layer3.3.bn3...nning_var', <Tensor, len() = 1024>)

=======================================================================11

[185]: ('module.layer3.4.conv1.weight', <Tensor, len() = 256>)
[186]: ('module.layer3.4.bn1.weight', <Tensor, len() = 256>)
[187]: ('module.layer3.4.bn1.bias', <Tensor, len() = 256>)
[188]: ('module.layer3.4.bn1...ning_mean', <Tensor, len() = 256>)
[189]: ('module.layer3.4.bn1...nning_var', <Tensor, len() = 256>)
[190]: ('module.layer3.4.conv2.weight', <Tensor, len() = 256>)
[191]: ('module.layer3.4.bn2.weight', <Tensor, len() = 256>)
[192]: ('module.layer3.4.bn2.bias', <Tensor, len() = 256>)
[193]: ('module.layer3.4.bn2...ning_mean', <Tensor, len() = 256>)
[194]: ('module.layer3.4.bn2...nning_var', <Tensor, len() = 256>)
[195]: ('module.layer3.4.conv3.weight', <Tensor, len() = 1024>)
[196]: ('module.layer3.4.bn3.weight', <Tensor, len() = 1024>)
[197]: ('module.layer3.4.bn3.bias', <Tensor, len() = 1024>)
[198]: ('module.layer3.4.bn3...ning_mean', <Tensor, len() = 1024>)
[199]: ('module.layer3.4.bn3...nning_var', <Tensor, len() = 1024>)

=======================================================================12

[200]: ('module.layer3.5.conv1.weight', <Tensor, len() = 256>)
[201]: ('module.layer3.5.bn1.weight', <Tensor, len() = 256>)
[202]: ('module.layer3.5.bn1.bias', <Tensor, len() = 256>)
[203]: ('module.layer3.5.bn1...ning_mean', <Tensor, len() = 256>)
[204]: ('module.layer3.5.bn1...nning_var', <Tensor, len() = 256>)
[205]: ('module.layer3.5.conv2.weight', <Tensor, len() = 256>)
[206]: ('module.layer3.5.bn2.weight', <Tensor, len() = 256>)
[207]: ('module.layer3.5.bn2.bias', <Tensor, len() = 256>)
[208]: ('module.layer3.5.bn2...ning_mean', <Tensor, len() = 256>)
[209]: ('module.layer3.5.bn2...nning_var', <Tensor, len() = 256>)
[210]: ('module.layer3.5.conv3.weight', <Tensor, len() = 1024>)
[211]: ('module.layer3.5.bn3.weight', <Tensor, len() = 1024>)
[212]: ('module.layer3.5.bn3.bias', <Tensor, len() = 1024>)
[213]: ('module.layer3.5.bn3...ning_mean', <Tensor, len() = 1024>)
[214]: ('module.layer3.5.bn3...nning_var', <Tensor, len() = 1024>)

=======================================================================13

[215]: ('module.layer4.0.conv1.weight', <Tensor, len() = 512>)
[216]: ('module.layer4.0.bn1.weight', <Tensor, len() = 512>)
[217]: ('module.layer4.0.bn1.bias', <Tensor, len() = 512>)
[218]: ('module.layer4.0.bn1...ning_mean', <Tensor, len() = 512>)
[219]: ('module.layer4.0.bn1...nning_var', <Tensor, len() = 512>)
[220]: ('module.layer4.0.conv2.weight', <Tensor, len() = 512>)
[221]: ('module.layer4.0.bn2.weight', <Tensor, len() = 512>)
[222]: ('module.layer4.0.bn2.bias', <Tensor, len() = 512>)
[223]: ('module.layer4.0.bn2...ning_mean', <Tensor, len() = 512>)
[224]: ('module.layer4.0.bn2...nning_var', <Tensor, len() = 512>)
[225]: ('module.layer4.0.conv3.weight', <Tensor, len() = 2048>)
[226]: ('module.layer4.0.bn3.weight', <Tensor, len() = 2048>)
[227]: ('module.layer4.0.bn3.bias', <Tensor, len() = 2048>)
[228]: ('module.layer4.0.bn3...ning_mean', <Tensor, len() = 2048>)
[229]: ('module.layer4.0.bn3...nning_var', <Tensor, len() = 2048>)
[230]: ('module.layer4.0.dow....0.weight', <Tensor, len() = 2048>)
[231]: ('module.layer4.0.dow....1.weight', <Tensor, len() = 2048>)
[232]: ('module.layer4.0.dow...le.1.bias', <Tensor, len() = 2048>)
[233]: ('module.layer4.0.dow...ning_mean', <Tensor, len() = 2048>)
[234]: ('module.layer4.0.dow...nning_var', <Tensor, len() = 2048>)

====================================================================14

[235]: ('module.layer4.1.conv1.weight', <Tensor, len() = 512>)
[236]: ('module.layer4.1.bn1.weight', <Tensor, len() = 512>)
[237]: ('module.layer4.1.bn1.bias', <Tensor, len() = 512>)
[238]: ('module.layer4.1.bn1...ning_mean', <Tensor, len() = 512>)
[239]: ('module.layer4.1.bn1...nning_var', <Tensor, len() = 512>)
[240]: ('module.layer4.1.conv2.weight', <Tensor, len() = 512>)
[241]: ('module.layer4.1.bn2.weight', <Tensor, len() = 512>)
[242]: ('module.layer4.1.bn2.bias', <Tensor, len() = 512>)
[243]: ('module.layer4.1.bn2...ning_mean', <Tensor, len() = 512>)
[244]: ('module.layer4.1.bn2...nning_var', <Tensor, len() = 512>)
[245]: ('module.layer4.1.conv3.weight', <Tensor, len() = 2048>)
[246]: ('module.layer4.1.bn3.weight', <Tensor, len() = 2048>)
[247]: ('module.layer4.1.bn3.bias', <Tensor, len() = 2048>)
[248]: ('module.layer4.1.bn3...ning_mean', <Tensor, len() = 2048>)
[249]: ('module.layer4.1.bn3...nning_var', <Tensor, len() = 2048>)

=====================================================================15

[250]: ('module.layer4.2.conv1.weight', <Tensor, len() = 512>)
[251]: ('module.layer4.2.bn1.weight', <Tensor, len() = 512>)
[252]: ('module.layer4.2.bn1.bias', <Tensor, len() = 512>)
[253]: ('module.layer4.2.bn1...ning_mean', <Tensor, len() = 512>)
[254]: ('module.layer4.2.bn1...nning_var', <Tensor, len() = 512>)
[255]: ('module.layer4.2.conv2.weight', <Tensor, len() = 512>)
[256]: ('module.layer4.2.bn2.weight', <Tensor, len() = 512>)
[257]: ('module.layer4.2.bn2.bias', <Tensor, len() = 512>)
[258]: ('module.layer4.2.bn2...ning_mean', <Tensor, len() = 512>)
[259]: ('module.layer4.2.bn2...nning_var', <Tensor, len() = 512>)
[260]: ('module.layer4.2.conv3.weight', <Tensor, len() = 2048>)
[261]: ('module.layer4.2.bn3.weight', <Tensor, len() = 2048>)
[262]: ('module.layer4.2.bn3.bias', <Tensor, len() = 2048>)
[263]: ('module.layer4.2.bn3...ning_mean', <Tensor, len() = 2048>)
[264]: ('module.layer4.2.bn3...nning_var', <Tensor, len() = 2048>)
[265]: ('module.fc.weight', <Tensor, len() = 1000>)
[266]: ('module.fc.bias', <Tensor, len() = 1000>)






























[Phase 1] : Data Preperation
Files already downloaded and verified
Files already downloaded and verified

[Phase 2] : Model setup

model_ft.parameters()
<generator object Module.parameters at 0x0000022A21B33E08>
gi_code: <code object parameters at 0x0000022A1DD6D0C0, file "C:\Users\Yi\AppData\Local\Programs\Python\Python36\lib\site-packages\torch\nn\modules\module.py", line 723>
gi_frame: <frame object at 0x0000022A21B24CF8>
gi_running: False
gi_yieldfrom: None
Results View: Expanding the Results View will run the iterator
model_ft.state_dict().items()
<odict_items, len() = 267>
model_ft.state_dict()
OrderedDict([('module.bn1.bias', <Tensor, len() = 64>), ('module.bn1.running_mean', <Tensor, len() = 64>), ('module.bn1.running_var', <Tensor, len() = 64>), ('module.bn1.weight', <Tensor, len() = 64>), ('module.conv1.weight', <Tensor, len() = 64>), ('module.fc.bias', <Tensor, len() = 1000>), ('module.fc.weight', <Tensor, len() = 1000>), ('module.layer1.0.bn1.bias', <Tensor, len() = 64>), ('module.layer1.0.bn1...ning_mean', <Tensor, len() = 64>), ('module.layer1.0.bn1...nning_var', <Tensor, len() = 64>), ('module.layer1.0.bn1.weight', <Tensor, len() = 64>), ('module.layer1.0.bn2.bias', <Tensor, len() = 64>), ('module.layer1.0.bn2...ning_mean', <Tensor, len() = 64>), ('module.layer1.0.bn2...nning_var', <Tensor, len() = 64>), ...])
_metadata: OrderedDict([('', {'version': 1}), ('module', {'version': 1}), ('module.avgpool', {'version': 1}), ('module.bn1', {'version': 1}), ('module.conv1', {'version': 1}), ('module.fc', {'version': 1}), ('module.layer1', {'version': 1}), ('module.layer1.0', {'version': 1}), ('module.layer1.0.bn1', {'version': 1}), ('module.layer1.0.bn2', {'version': 1}), ('module.layer1.0.bn3', {'version': 1}), ('module.layer1.0.conv1', {'version': 1}), ('module.layer1.0.conv2', {'version': 1}), ('module.layer1.0.conv3', {'version': 1}), ...])
items(): 
['module.conv1.weight']: <Tensor, len() = 64>
['module.bn1.weight']: <Tensor, len() = 64>
['module.bn1.bias']: <Tensor, len() = 64>
['module.bn1.running_mean']: <Tensor, len() = 64>
['module.bn1.running_var']: <Tensor, len() = 64>
['module.layer1.0.conv1.weight']: <Tensor, len() = 64>
['module.layer1.0.bn1.weight']: <Tensor, len() = 64>
['module.layer1.0.bn1.bias']: <Tensor, len() = 64>
['module.layer1.0.bn1.running_mean']: <Tensor, len() = 64>
['module.layer1.0.bn1.running_var']: <Tensor, len() = 64>
['module.layer1.0.conv2.weight']: <Tensor, len() = 64>
['module.layer1.0.bn2.weight']: <Tensor, len() = 64>
['module.layer1.0.bn2.bias']: <Tensor, len() = 64>
['module.layer1.0.bn2.running_mean']: <Tensor, len() = 64>
['module.layer1.0.bn2.running_var']: <Tensor, len() = 64>
['module.layer1.0.conv3.weight']: <Tensor, len() = 256>
['module.layer1.0.bn3.weight']: <Tensor, len() = 256>
['module.layer1.0.bn3.bias']: <Tensor, len() = 256>
['module.layer1.0.bn3.running_mean']: <Tensor, len() = 256>
['module.layer1.0.bn3.running_var']: <Tensor, len() = 256>
['module.layer1.0.downsample.0.weight']: <Tensor, len() = 256>
['module.layer1.0.downsample.1.weight']: <Tensor, len() = 256>
['module.layer1.0.downsample.1.bias']: <Tensor, len() = 256>
['module.layer1.0.downsample.1.running_mean']: <Tensor, len() = 256>
['module.layer1.0.downsample.1.running_var']: <Tensor, len() = 256>
['module.layer1.1.conv1.weight']: <Tensor, len() = 64>
['module.layer1.1.bn1.weight']: <Tensor, len() = 64>
['module.layer1.1.bn1.bias']: <Tensor, len() = 64>
['module.layer1.1.bn1.running_mean']: <Tensor, len() = 64>
['module.layer1.1.bn1.running_var']: <Tensor, len() = 64>
['module.layer1.1.conv2.weight']: <Tensor, len() = 64>
['module.layer1.1.bn2.weight']: <Tensor, len() = 64>
['module.layer1.1.bn2.bias']: <Tensor, len() = 64>
['module.layer1.1.bn2.running_mean']: <Tensor, len() = 64>
['module.layer1.1.bn2.running_var']: <Tensor, len() = 64>
['module.layer1.1.conv3.weight']: <Tensor, len() = 256>
['module.layer1.1.bn3.weight']: <Tensor, len() = 256>
['module.layer1.1.bn3.bias']: <Tensor, len() = 256>
['module.layer1.1.bn3.running_mean']: <Tensor, len() = 256>
['module.layer1.1.bn3.running_var']: <Tensor, len() = 256>
['module.layer1.2.conv1.weight']: <Tensor, len() = 64>
['module.layer1.2.bn1.weight']: <Tensor, len() = 64>
['module.layer1.2.bn1.bias']: <Tensor, len() = 64>
['module.layer1.2.bn1.running_mean']: <Tensor, len() = 64>
['module.layer1.2.bn1.running_var']: <Tensor, len() = 64>
['module.layer1.2.conv2.weight']: <Tensor, len() = 64>
['module.layer1.2.bn2.weight']: <Tensor, len() = 64>
['module.layer1.2.bn2.bias']: <Tensor, len() = 64>
['module.layer1.2.bn2.running_mean']: <Tensor, len() = 64>
['module.layer1.2.bn2.running_var']: <Tensor, len() = 64>
['module.layer1.2.conv3.weight']: <Tensor, len() = 256>
['module.layer1.2.bn3.weight']: <Tensor, len() = 256>
['module.layer1.2.bn3.bias']: <Tensor, len() = 256>
['module.layer1.2.bn3.running_mean']: <Tensor, len() = 256>
['module.layer1.2.bn3.running_var']: <Tensor, len() = 256>
['module.layer2.0.conv1.weight']: <Tensor, len() = 128>
['module.layer2.0.bn1.weight']: <Tensor, len() = 128>
['module.layer2.0.bn1.bias']: <Tensor, len() = 128>
['module.layer2.0.bn1.running_mean']: <Tensor, len() = 128>
['module.layer2.0.bn1.running_var']: <Tensor, len() = 128>
['module.layer2.0.conv2.weight']: <Tensor, len() = 128>
['module.layer2.0.bn2.weight']: <Tensor, len() = 128>
['module.layer2.0.bn2.bias']: <Tensor, len() = 128>
['module.layer2.0.bn2.running_mean']: <Tensor, len() = 128>
['module.layer2.0.bn2.running_var']: <Tensor, len() = 128>
['module.layer2.0.conv3.weight']: <Tensor, len() = 512>
['module.layer2.0.bn3.weight']: <Tensor, len() = 512>
['module.layer2.0.bn3.bias']: <Tensor, len() = 512>
['module.layer2.0.bn3.running_mean']: <Tensor, len() = 512>
['module.layer2.0.bn3.running_var']: <Tensor, len() = 512>
['module.layer2.0.downsample.0.weight']: <Tensor, len() = 512>
['module.layer2.0.downsample.1.weight']: <Tensor, len() = 512>
['module.layer2.0.downsample.1.bias']: <Tensor, len() = 512>
['module.layer2.0.downsample.1.running_mean']: <Tensor, len() = 512>
['module.layer2.0.downsample.1.running_var']: <Tensor, len() = 512>
['module.layer2.1.conv1.weight']: <Tensor, len() = 128>
['module.layer2.1.bn1.weight']: <Tensor, len() = 128>
['module.layer2.1.bn1.bias']: <Tensor, len() = 128>
['module.layer2.1.bn1.running_mean']: <Tensor, len() = 128>
['module.layer2.1.bn1.running_var']: <Tensor, len() = 128>
['module.layer2.1.conv2.weight']: <Tensor, len() = 128>
['module.layer2.1.bn2.weight']: <Tensor, len() = 128>
['module.layer2.1.bn2.bias']: <Tensor, len() = 128>
['module.layer2.1.bn2.running_mean']: <Tensor, len() = 128>
['module.layer2.1.bn2.running_var']: <Tensor, len() = 128>
['module.layer2.1.conv3.weight']: <Tensor, len() = 512>
['module.layer2.1.bn3.weight']: <Tensor, len() = 512>
['module.layer2.1.bn3.bias']: <Tensor, len() = 512>
['module.layer2.1.bn3.running_mean']: <Tensor, len() = 512>
['module.layer2.1.bn3.running_var']: <Tensor, len() = 512>
['module.layer2.2.conv1.weight']: <Tensor, len() = 128>
['module.layer2.2.bn1.weight']: <Tensor, len() = 128>
['module.layer2.2.bn1.bias']: <Tensor, len() = 128>
['module.layer2.2.bn1.running_mean']: <Tensor, len() = 128>
['module.layer2.2.bn1.running_var']: <Tensor, len() = 128>
['module.layer2.2.conv2.weight']: <Tensor, len() = 128>
['module.layer2.2.bn2.weight']: <Tensor, len() = 128>
['module.layer2.2.bn2.bias']: <Tensor, len() = 128>
['module.layer2.2.bn2.running_mean']: <Tensor, len() = 128>
['module.layer2.2.bn2.running_var']: <Tensor, len() = 128>
['module.layer2.2.conv3.weight']: <Tensor, len() = 512>
['module.layer2.2.bn3.weight']: <Tensor, len() = 512>
['module.layer2.2.bn3.bias']: <Tensor, len() = 512>
['module.layer2.2.bn3.running_mean']: <Tensor, len() = 512>
['module.layer2.2.bn3.running_var']: <Tensor, len() = 512>
['module.layer2.3.conv1.weight']: <Tensor, len() = 128>
['module.layer2.3.bn1.weight']: <Tensor, len() = 128>
['module.layer2.3.bn1.bias']: <Tensor, len() = 128>
['module.layer2.3.bn1.running_mean']: <Tensor, len() = 128>
['module.layer2.3.bn1.running_var']: <Tensor, len() = 128>
['module.layer2.3.conv2.weight']: <Tensor, len() = 128>
['module.layer2.3.bn2.weight']: <Tensor, len() = 128>
['module.layer2.3.bn2.bias']: <Tensor, len() = 128>
['module.layer2.3.bn2.running_mean']: <Tensor, len() = 128>
['module.layer2.3.bn2.running_var']: <Tensor, len() = 128>
['module.layer2.3.conv3.weight']: <Tensor, len() = 512>
['module.layer2.3.bn3.weight']: <Tensor, len() = 512>
['module.layer2.3.bn3.bias']: <Tensor, len() = 512>
['module.layer2.3.bn3.running_mean']: <Tensor, len() = 512>
['module.layer2.3.bn3.running_var']: <Tensor, len() = 512>
['module.layer3.0.conv1.weight']: <Tensor, len() = 256>
['module.layer3.0.bn1.weight']: <Tensor, len() = 256>
['module.layer3.0.bn1.bias']: <Tensor, len() = 256>
['module.layer3.0.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.0.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.0.conv2.weight']: <Tensor, len() = 256>
['module.layer3.0.bn2.weight']: <Tensor, len() = 256>
['module.layer3.0.bn2.bias']: <Tensor, len() = 256>
['module.layer3.0.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.0.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.0.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.0.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.0.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.0.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.0.bn3.running_var']: <Tensor, len() = 1024>
['module.layer3.0.downsample.0.weight']: <Tensor, len() = 1024>
['module.layer3.0.downsample.1.weight']: <Tensor, len() = 1024>
['module.layer3.0.downsample.1.bias']: <Tensor, len() = 1024>
['module.layer3.0.downsample.1.running_mean']: <Tensor, len() = 1024>
['module.layer3.0.downsample.1.running_var']: <Tensor, len() = 1024>
['module.layer3.1.conv1.weight']: <Tensor, len() = 256>
['module.layer3.1.bn1.weight']: <Tensor, len() = 256>
['module.layer3.1.bn1.bias']: <Tensor, len() = 256>
['module.layer3.1.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.1.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.1.conv2.weight']: <Tensor, len() = 256>
['module.layer3.1.bn2.weight']: <Tensor, len() = 256>
['module.layer3.1.bn2.bias']: <Tensor, len() = 256>
['module.layer3.1.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.1.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.1.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.1.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.1.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.1.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.1.bn3.running_var']: <Tensor, len() = 1024>
['module.layer3.2.conv1.weight']: <Tensor, len() = 256>
['module.layer3.2.bn1.weight']: <Tensor, len() = 256>
['module.layer3.2.bn1.bias']: <Tensor, len() = 256>
['module.layer3.2.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.2.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.2.conv2.weight']: <Tensor, len() = 256>
['module.layer3.2.bn2.weight']: <Tensor, len() = 256>
['module.layer3.2.bn2.bias']: <Tensor, len() = 256>
['module.layer3.2.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.2.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.2.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.2.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.2.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.2.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.2.bn3.running_var']: <Tensor, len() = 1024>
['module.layer3.3.conv1.weight']: <Tensor, len() = 256>
['module.layer3.3.bn1.weight']: <Tensor, len() = 256>
['module.layer3.3.bn1.bias']: <Tensor, len() = 256>
['module.layer3.3.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.3.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.3.conv2.weight']: <Tensor, len() = 256>
['module.layer3.3.bn2.weight']: <Tensor, len() = 256>
['module.layer3.3.bn2.bias']: <Tensor, len() = 256>
['module.layer3.3.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.3.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.3.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.3.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.3.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.3.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.3.bn3.running_var']: <Tensor, len() = 1024>
['module.layer3.4.conv1.weight']: <Tensor, len() = 256>
['module.layer3.4.bn1.weight']: <Tensor, len() = 256>
['module.layer3.4.bn1.bias']: <Tensor, len() = 256>
['module.layer3.4.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.4.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.4.conv2.weight']: <Tensor, len() = 256>
['module.layer3.4.bn2.weight']: <Tensor, len() = 256>
['module.layer3.4.bn2.bias']: <Tensor, len() = 256>
['module.layer3.4.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.4.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.4.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.4.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.4.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.4.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.4.bn3.running_var']: <Tensor, len() = 1024>
['module.layer3.5.conv1.weight']: <Tensor, len() = 256>
['module.layer3.5.bn1.weight']: <Tensor, len() = 256>
['module.layer3.5.bn1.bias']: <Tensor, len() = 256>
['module.layer3.5.bn1.running_mean']: <Tensor, len() = 256>
['module.layer3.5.bn1.running_var']: <Tensor, len() = 256>
['module.layer3.5.conv2.weight']: <Tensor, len() = 256>
['module.layer3.5.bn2.weight']: <Tensor, len() = 256>
['module.layer3.5.bn2.bias']: <Tensor, len() = 256>
['module.layer3.5.bn2.running_mean']: <Tensor, len() = 256>
['module.layer3.5.bn2.running_var']: <Tensor, len() = 256>
['module.layer3.5.conv3.weight']: <Tensor, len() = 1024>
['module.layer3.5.bn3.weight']: <Tensor, len() = 1024>
['module.layer3.5.bn3.bias']: <Tensor, len() = 1024>
['module.layer3.5.bn3.running_mean']: <Tensor, len() = 1024>
['module.layer3.5.bn3.running_var']: <Tensor, len() = 1024>
['module.layer4.0.conv1.weight']: <Tensor, len() = 512>
['module.layer4.0.bn1.weight']: <Tensor, len() = 512>
['module.layer4.0.bn1.bias']: <Tensor, len() = 512>
['module.layer4.0.bn1.running_mean']: <Tensor, len() = 512>
['module.layer4.0.bn1.running_var']: <Tensor, len() = 512>
['module.layer4.0.conv2.weight']: <Tensor, len() = 512>
['module.layer4.0.bn2.weight']: <Tensor, len() = 512>
['module.layer4.0.bn2.bias']: <Tensor, len() = 512>
['module.layer4.0.bn2.running_mean']: <Tensor, len() = 512>
['module.layer4.0.bn2.running_var']: <Tensor, len() = 512>
['module.layer4.0.conv3.weight']: <Tensor, len() = 2048>
['module.layer4.0.bn3.weight']: <Tensor, len() = 2048>
['module.layer4.0.bn3.bias']: <Tensor, len() = 2048>
['module.layer4.0.bn3.running_mean']: <Tensor, len() = 2048>
['module.layer4.0.bn3.running_var']: <Tensor, len() = 2048>
['module.layer4.0.downsample.0.weight']: <Tensor, len() = 2048>
['module.layer4.0.downsample.1.weight']: <Tensor, len() = 2048>
['module.layer4.0.downsample.1.bias']: <Tensor, len() = 2048>
['module.layer4.0.downsample.1.running_mean']: <Tensor, len() = 2048>
['module.layer4.0.downsample.1.running_var']: <Tensor, len() = 2048>
['module.layer4.1.conv1.weight']: <Tensor, len() = 512>
['module.layer4.1.bn1.weight']: <Tensor, len() = 512>
['module.layer4.1.bn1.bias']: <Tensor, len() = 512>
['module.layer4.1.bn1.running_mean']: <Tensor, len() = 512>
['module.layer4.1.bn1.running_var']: <Tensor, len() = 512>
['module.layer4.1.conv2.weight']: <Tensor, len() = 512>
['module.layer4.1.bn2.weight']: <Tensor, len() = 512>
['module.layer4.1.bn2.bias']: <Tensor, len() = 512>
['module.layer4.1.bn2.running_mean']: <Tensor, len() = 512>
['module.layer4.1.bn2.running_var']: <Tensor, len() = 512>
['module.layer4.1.conv3.weight']: <Tensor, len() = 2048>
['module.layer4.1.bn3.weight']: <Tensor, len() = 2048>
['module.layer4.1.bn3.bias']: <Tensor, len() = 2048>
['module.layer4.1.bn3.running_mean']: <Tensor, len() = 2048>
['module.layer4.1.bn3.running_var']: <Tensor, len() = 2048>
['module.layer4.2.conv1.weight']: <Tensor, len() = 512>
['module.layer4.2.bn1.weight']: <Tensor, len() = 512>
['module.layer4.2.bn1.bias']: <Tensor, len() = 512>
['module.layer4.2.bn1.running_mean']: <Tensor, len() = 512>
['module.layer4.2.bn1.running_var']: <Tensor, len() = 512>
['module.layer4.2.conv2.weight']: <Tensor, len() = 512>
['module.layer4.2.bn2.weight']: <Tensor, len() = 512>
['module.layer4.2.bn2.bias']: <Tensor, len() = 512>
['module.layer4.2.bn2.running_mean']: <Tensor, len() = 512>
['module.layer4.2.bn2.running_var']: <Tensor, len() = 512>
['module.layer4.2.conv3.weight']: <Tensor, len() = 2048>
['module.layer4.2.bn3.weight']: <Tensor, len() = 2048>
['module.layer4.2.bn3.bias']: <Tensor, len() = 2048>
['module.layer4.2.bn3.running_mean']: <Tensor, len() = 2048>
['module.layer4.2.bn3.running_var']: <Tensor, len() = 2048>
['module.fc.weight']: <Tensor, len() = 1000>
['module.fc.bias']: <Tensor, len() = 1000>






























[Phase 1] : Data Preperation
Files already downloaded and verified
Files already downloaded and verified

[Phase 2] : Model setup

model_ft.parameters()
<generator object Module.parameters at 0x0000022A21B33E08>
gi_code: <code object parameters at 0x0000022A1DD6D0C0, file "C:\Users\Yi\AppData\Local\Programs\Python\Python36\lib\site-packages\torch\nn\modules\module.py", line 723>
gi_frame: <frame object at 0x0000022A21B24CF8>
gi_running: False
gi_yieldfrom: None
Results View: Expanding the Results View will run the iterator
model_ft.state_dict().items()
<odict_items, len() = 267>
model_ft.state_dict()
OrderedDict([('module.bn1.bias', <Tensor, len() = 64>), ('module.bn1.running_mean', <Tensor, len() = 64>), ('module.bn1.running_var', <Tensor, len() = 64>), ('module.bn1.weight', <Tensor, len() = 64>), ('module.conv1.weight', <Tensor, len() = 64>), ('module.fc.bias', <Tensor, len() = 1000>), ('module.fc.weight', <Tensor, len() = 1000>), ('module.layer1.0.bn1.bias', <Tensor, len() = 64>), ('module.layer1.0.bn1...ning_mean', <Tensor, len() = 64>), ('module.layer1.0.bn1...nning_var', <Tensor, len() = 64>), ('module.layer1.0.bn1.weight', <Tensor, len() = 64>), ('module.layer1.0.bn2.bias', <Tensor, len() = 64>), ('module.layer1.0.bn2...ning_mean', <Tensor, len() = 64>), ('module.layer1.0.bn2...nning_var', <Tensor, len() = 64>), ...])
model_ft
DataParallel(
  (module): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )

====================================================================================================1


      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================2

      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================3

    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )

====================================================================================================4
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================5
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================6
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================7
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
====================================================================================================8
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================9
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================10
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================11
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================12
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================13
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
====================================================================================================14
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
====================================================================================================15
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
    (fc): Linear(in_features=2048, out_features=1000, bias=True)
  )
)
_backend: <THNNFunctionBackend>
_backward_hooks: OrderedDict([])
_buffers: OrderedDict([])
_forward_hooks: OrderedDict([])
_forward_pre_hooks: OrderedDict([])
_modules: OrderedDict([('module', ResNet(
  (conv1): C...as=True)
))])
_parameters: OrderedDict([])
_version: 1
device_ids: range(0, 1)
dim: 0
dump_patches: False
module: ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (2): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
  )
  (layer2): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (2): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (3): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
  )
  (layer3): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (2): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (3): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (4): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (5): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
  )
  (layer4): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (downsample): Sequential(
        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
    (2): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
    )
  )
  (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
_backend: <THNNFunctionBackend>
_backward_hooks: OrderedDict([])
_buffers: OrderedDict([])
_forward_hooks: OrderedDict([])
_forward_pre_hooks: OrderedDict([])
_modules: OrderedDict([('avgpool', AvgPool2d(kernel_siz...padding=0)), ('bn1', BatchNorm2d(64, eps=...tats=True)), ('conv1', Conv2d(3, 64, kernel...ias=False)), ('fc', Linear(in_features=2...bias=True)), ('layer1', Sequential(
  (0): B...ace)
  )
)), ('layer2', Sequential(
  (0): B...ace)
  )
)), ('layer3', Sequential(
  (0): B...ace)
  )
)), ('layer4', Sequential(
  (0): B...ace)
  )
)), ('maxpool', MaxPool2d(kernel_siz...ode=False)), ('relu', ReLU(inplace))])
_parameters: OrderedDict([])
_version: 1
avgpool: AvgPool2d(kernel_size=7, stride=7, padding=0)
bn1: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
conv1: Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
dump_patches: False
fc: Linear(in_features=2048, out_features=1000, bias=True)
inplanes: 2048
layer1: Sequential(
  (0): Bottleneck(
    (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (downsample): Sequential(
      (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (1): Bottleneck(
    (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (2): Bottleneck(
    (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
)
layer2: Sequential(
  (0): Bottleneck(
    (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (downsample): Sequential(
      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (1): Bottleneck(
    (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (2): Bottleneck(
    (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (3): Bottleneck(
    (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
)
layer3: Sequential(
  (0): Bottleneck(
    (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (downsample): Sequential(
      (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (1): Bottleneck(
    (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (2): Bottleneck(
    (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (3): Bottleneck(
    (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (4): Bottleneck(
    (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (5): Bottleneck(
    (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
)
layer4: Sequential(
  (0): Bottleneck(
    (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (downsample): Sequential(
      (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (1): Bottleneck(
    (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
  (2): Bottleneck(
    (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
  )
)
maxpool: MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
relu: ReLU(inplace)
training: True
output_device: 0
training: True